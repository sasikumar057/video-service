const startButton = document.getElementById('start');
const stopButton = document.getElementById('stop');
const videoElement = document.getElementById('preview');
let mediaRecorder;
let recordedChunks = [];

startButton.onclick = async () => {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        videoElement.srcObject = stream;
        setupRecorder(stream);
    } catch (err) {
        console.error("Error accessing camera and microphone", err);
    }
};

function setupRecorder(stream) {
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.ondataavailable = event => {
        if (event.data.size > 0) recordedChunks.push(event.data);
    };
    mediaRecorder.onstop = uploadVideo;
    mediaRecorder.start(10); // For every 10ms of data
    startButton.disabled = true;
    stopButton.disabled = false;
}

stopButton.onclick = () => {
    mediaRecorder.stop();
    videoElement.srcObject.getTracks().forEach(track => track.stop()); // Stop video stream
    startButton.disabled = false;
    stopButton.disabled = true;
};


async function uploadVideo() {
    console.log("Attempting to upload video...");
    const blob = new Blob(recordedChunks, { type: 'video/webm' });
    let formData = new FormData();
    formData.append('video', blob);

    try {
        const serverUrl = 'http://localhost:3000/upload'; // Correctly define server URL
        const response = await fetch(serverUrl, { // Use serverUrl here
            method: 'POST',
            body: formData,
            credentials: 'include'
        });
        if (response.ok) {
            console.log("Video uploaded successfully.");
        } else {
            console.error("Upload failed", await response.text()); // Get error details if available
        }
    } catch (error) {
        console.error("Error uploading video", error);
    }
}
